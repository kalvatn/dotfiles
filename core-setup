#!/bin/bash

set -e

DOTFILE_ROOT="$(pwd)"
if [ "$DOTFILE_ROOT" != "$HOME/dotfiles" ]; then
  echo "must be run from $HOME/dotfiles"
  exit 1
fi
ln -sf "$DOTFILE_ROOT/.aliases" "$HOME"
ln -sf "$DOTFILE_ROOT/.variables" "$HOME"
ln -sf "$DOTFILE_ROOT/.functions" "$HOME"
source "$HOME/.functions"


function cmd() {
  basename "$0"
}

function show_help_message() {
  read -r -d '\0' helpstring <<EOM
$(cmd) [OPTION...]
  -v | increase verbosity (multiple instances will further increase verbosity,
     | e.g. -vv will enable TRACE logging level)
  -v | increase verbosity (multiple instances will further decrease verbosity,
     | e.g.  -qqq will completely disable logging (same as -l DISABLED))
  -l | toggle specific log level, will override verbosity switches
     | (valid values : [ DEBUG, INFO, WARN, ERROR, DISABLED ] )
  -u | show usage example
  -h | show this help message
\0
EOM
  echo "$helpstring" | column -t -s "|"
}


VERBOSE=1

while getopts ":huvql:" OPTION; do
  case $OPTION in
    h|u)
      show_help_message
      exit 2
      ;;
    q)
      VERBOSE="$(($VERBOSE - 1))"
      ;;
    v)
      VERBOSE="$(($VERBOSE + 1))"
      ;;
    l)
      case "$OPTARG" in
        ERROR|-1)
          LOGLEVEL=ERROR;;
        WARN|0)
          LOGLEVEL=WARN;;
        INFO|1)
          LOGLEVEL=INFO;;
        DEBUG|2)
          LOGLEVEL=DEBUG;;
        *)
          echo "illegal value '$OPTARG' for option -$OPTION, legal values are [ERROR|-1, WARN|0, INFO|1, DEBUG|2]" >&2
          exit 1
          ;;
        esac
      ;;
    \?)
      show_help_message
      echo "unknown option -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "option -$OPTARG requires an argument" >&2
      exit 1
      ;;
  esac
done

if [ ! -n "$LOGLEVEL" -a -n "$VERBOSE" ]; then
  case "$VERBOSE" in
    -1) LOGLEVEL=ERROR;;
    -*) LOGLEVEL=DISABLED;;
    0) LOGLEVEL=WARN;;
    1) LOGLEVEL=INFO;;
    *) LOGLEVEL=DEBUG;;
  esac
fi

export LOGLEVEL="$LOGLEVEL"

debug "loglevel debug"
info "loglevel debug"
warn "loglevel debug"
error "loglevel debug"
./scripts/installation/git/install

git submodule update --init

./scripts/installation/vim/install
./scripts/installation/tmux/install
./scripts/installation/shell/zsh/install
exit

ln -fs "$DOTFILE_ROOT/bin" "$HOME"
ln -fs "$DOTFILE_ROOT/.gemrc" "$HOME"
ln -fs "$DOTFILE_ROOT/.my.cnf" "$HOME"
ln -fs "$DOTFILE_ROOT/.notify-osd" "$HOME"
ln -fs "$DOTFILE_ROOT/.asoundrc" "$HOME"
ln -fs "$DOTFILE_ROOT/.xinitrc" "$HOME"
ln -fs "$DOTFILE_ROOT/.Xresources" "$HOME"
ln -fs "$DOTFILE_ROOT/.urxvt" "$HOME"



# warn about missing packages

# linter packages

# bash
[[ -z "$(which shellcheck)" ]] && echo "sudo apt-get install shellcheck" || echo "shellcheck installed"
[[ -z "$(which bashate)" ]] && echo "sudo apt-get install python-pip && sudo pip install bashate" || echo "bashate installed"
# markdown
[[ -z "$(which mdl)" ]] && echo "sudo gem install mdl" || echo "mdl installed"
# pylint
[[ -z "$(which pylint)" ]] && echo "sudo pip install pylint" || echo "pylint installed"


# various other tools
[[ -z "$(which feh)" ]] && echo "sudo apt-get install feh" || echo "feh installed"
[[ -z "$(which scrot)" ]] && echo "sudo apt-get install scrot" || echo "scrot installed"
[[ -z "$(which unclutter)" ]] && echo "sudo apt-get install unclutter" || echo "unclutter installed"
