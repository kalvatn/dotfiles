#!/bin/bash

set -e

DOTFILE_ROOT="$(pwd)"
if [ "$DOTFILE_ROOT" != "$HOME/dotfiles" ]; then
  echo "must be run from $HOME/dotfiles"
  exit 1
fi
ln -sf "$DOTFILE_ROOT/.aliases" "$HOME"
ln -sf "$DOTFILE_ROOT/.variables" "$HOME"
ln -sf "$DOTFILE_ROOT/.functions" "$HOME"
source "$HOME/.functions"


function cmd() {
  basename "$0"
}

function show_help_message() {
  read -r -d '\0' helpstring <<EOM
$(cmd) [OPTION...]
  -v | increase verbosity (multiple instances will further increase verbosity,
     | e.g. -vv will enable TRACE logging level)
  -q | decrease verbosity (multiple instances will further decrease verbosity,
     | e.g.  -qqq will completely disable logging (same as -l DISABLED))
  -l | toggle specific log level, will override verbosity switches
     | (valid values : [ DEBUG, INFO, WARN, ERROR, DISABLED ] )
  -u | show usage example
  -h | show this help message
\0
EOM
  echo "$helpstring" | column -t -s "|"
}

function show_usage_message() {
  echo "usage : $(cmd) [-v] [-q] [-l <LOGLEVEL>] [-u] [-h]"
  echo "try '$(cmd) -h' for more information"
}


VERBOSE=1

while getopts ":huvql:" OPTION; do
  case $OPTION in
    h)
      show_help_message
      exit 0
      ;;
    u)
      show_usage_message
      exit 0
      ;;
    q)
      VERBOSE="$((VERBOSE - 1))"
      ;;
    v)
      VERBOSE="$((VERBOSE + 1))"
      ;;
    l)
      case "$OPTARG" in
        ERROR|-1) LOGLEVEL=ERROR;;
        WARN|0) LOGLEVEL=WARN;;
        INFO|1) LOGLEVEL=INFO;;
        DEBUG|2) LOGLEVEL=DEBUG;;
        *)
          echo "illegal value '$OPTARG' for option -$OPTION, legal values are [ERROR|-1, WARN|0, INFO|1, DEBUG|2]" >&2
          exit 1
          ;;
        esac
      ;;
    \?)
      echo "unrecognized option '-$OPTARG'" >&2
      show_usage_message
      exit 1
      ;;
    :)
      echo "option '-$OPTARG' requires an argument" >&2
      show_usage_message
      exit 1
      ;;
  esac
done

if [ ! -n "$LOGLEVEL" -a -n "$VERBOSE" ]; then
  case "$VERBOSE" in
    -1) LOGLEVEL=ERROR;;
    -*) LOGLEVEL=DISABLED;;
    0)  LOGLEVEL=WARN;;
    1)  LOGLEVEL=INFO;;
    *)  LOGLEVEL=DEBUG;;
  esac
fi

export LOGLEVEL="$LOGLEVEL"

# prerequisites

if ! command -v apt-add-repository &>/dev/null; then
  apt_install software-properties-common
fi

if ! command -v curl &> /dev/null; then
  apt_install curl
fi

if ! command -v bzip2 &> /dev/null; then
  apt_install bzip2
fi

# prerequisites

./scripts/installation/git/install

info "updating git modules"
git submodule update --init

./scripts/installation/tools/environments/ruby/install
./scripts/installation/tools/environments/mysql/install
./scripts/installation/tools/search/silversearcher/install
./scripts/installation/tools/xml/install
./scripts/installation/vpn/openconnect/install

./scripts/installation/shell/bash/install
./scripts/installation/shell/zsh/install

./scripts/installation/browser/google-chrome/install

./scripts/installation/vim/install
./scripts/installation/tmux/install

./scripts/installation/desktop/user-dirs/install
./scripts/installation/desktop/X/install
./scripts/installation/desktop/gnome/install
./scripts/installation/desktop/i3/install
./scripts/installation/desktop/xbacklight/install



./scripts/installation/chat/profanity/install
./scripts/installation/misc/urxvt/install
./scripts/installation/misc/notify-osd/install
./scripts/installation/misc/alsa/install

./scripts/installation/docker/install
./scripts/installation/command-line-dictionary/install
./scripts/installation/misc/notify-osd/install

./scripts/installation/media/ncmpcpp/install
./scripts/installation/media/mopidy/install
#./scripts/installation/media/pipelight/install


symlink_to_home "$DOTFILE_ROOT/bin"



# warn about missing packages

# linter packages

if ! command -v shellcheck &>/dev/null; then
  warn "shell linter 'shellcheck' is not installed, install with 'sudo apt-get install shellcheck'"
fi
if ! command -v shellcheck &>/dev/null; then
  warn "shell linter 'bashate' is not installed, install with 'sudo apt-get install python-pip && sudo pip install bashate'"
fi
if ! command -v mdl &>/dev/null; then
  warn "markdown linter 'mdl' is not installed, install with 'sudo gem install mdl'"
fi
if ! command -v mdl &>/dev/null; then
  warn "python linter 'pylint' is not installed, install with 'sudo pip install python-pip && sudo pip install pylint'"
fi


# various other tools
if ! command -v feh &>/dev/null; then
  warn "image viewer 'feh' is not installed, install with 'sudo apt-get install feh'"
fi
if ! command -v scrot &>/dev/null; then
  warn "screenshot tool 'scrot' is not installed, install with 'sudo apt-get install scrot'"
fi
if ! command -v unclutter &>/dev/null; then
  warn "mouse pointer hider 'unclutter' is not installed, install with 'sudo apt-get install unclutter'"
fi

rainbow "finished setting up dotfiles"
